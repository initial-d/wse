package edu.nyu.cs.cs2580;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Vector;


public class vByte {
  private LinkedList<Byte> al=new LinkedList<Byte>();//dunno which list is byte better...
    private ArrayList<Integer> intal =new ArrayList<Integer>();
    public Vector<DocOccPair> deCompress(){
      Vector<DocOccPair> dop=new Vector<DocOccPair>();
    	ArrayList<Integer> ll=this.getInts();
    	int i=1;
    	int curdoc=0;
    	int curocc=0;
    	while(i<ll.size()){
    		int range=ll.get(i)+i;
    		curdoc+=ll.get(i-1);
    		for(int j=i+1;j<=range;j++){
    			curocc+=ll.get(j);
    			dop.add(new DocOccPair(curdoc,curocc));
    		}
    		i=range+2;
    		curocc=0;
    		
    	}
    	return dop;
    }
    public static vByte simplify(Vector<DocOccPair> dop){
    	//transform pairs into bytes
    	int docgroup=dop.get(0).getDid();
    	int lastdocgroup=0;
    	int ncount=0;
    	int firstloc=0;
    	ArrayList<Integer> ll=new ArrayList<Integer>();
    	ArrayList<Integer> al=new ArrayList<Integer>();
    	for(int i=0;i<dop.size();i++){
    		if(dop.get(i).getDid()==docgroup){
    			al.add(dop.get(i).getOcc()-firstloc);
    			firstloc=dop.get(i).getOcc();
    			ncount++;
    		}
    		else{
    			ll.add(docgroup-lastdocgroup);
    			ll.add(ncount);
    			ll.addAll(al);
    			al.clear();
    			ncount=1;
    			lastdocgroup=dop.get(i-1).getDid();
    			docgroup=dop.get(i).getDid();
    			al.add(dop.get(i).getOcc());
    			firstloc=dop.get(i).getOcc();
    		}
    	}
    	ll.add(docgroup-lastdocgroup);
    	ll.add(ncount);
    	ll.addAll(al);
    	vByte sim=new vByte(ll);
    	return sim;
    }
    public vByte(ArrayList<Integer> ial){
        intal=new ArrayList<Integer>(ial);
        for(Integer i:intal){
            if(i>=1<<21){
                al.add((byte)(i>>21));
            }
            i&=(1<<21)-1;
            if(i>=1<<14){
                al.add((byte)(i>>14));
            }
            i&=(1<<14)-1;
            if(i>=1<<7){
                al.add((byte)(i>>7));
            }
            i&=(1<<7)-1;
            i|=128;
            al.add(i.byteValue());
        }
    }
    public LinkedList<Byte> getBytes(){
        return (LinkedList<Byte>) al.clone();
    }
    public ArrayList<Integer> getInts(){
        return (ArrayList<Integer>) intal.clone();
    }
    public vByte(LinkedList<Byte> bal){
        intal.clear();
        for(int i=0;i<bal.size();i++){
            int tmp=0;
            while(bal.get(i)>0){
                tmp=tmp<<7;
                tmp+=bal.get(i);
                i++;
            }
            tmp=tmp<<7;
            tmp+=bal.get(i)&127;
            intal.add(tmp);
        }//don't let the last byte <0!
    }
}
